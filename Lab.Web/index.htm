<!DOCTYPE html>

<html lang="en">
<head>
  <meta charset="utf-8" />
  <title>Lab</title>
  <link href="/content/css/foundation.css" rel="stylesheet"/>
  <link href="/content/css/app.css" rel="stylesheet"/>
  <link href="/content/css/fileuploader.css" rel="stylesheet"/>
</head>
<body>
  <div id="app">
    <div class="banner">
      <a class="branding">Lab</a>
      <div id="nav"></div>
    </div>
    <div class="container">
      <div id="main"></div>  
    </div>
  </div>

  <!-- Navigation -->
  <script id="nav-item-template" type="text/html">
    <a href="<%= url %>"><%= name %></a>    
  </script>

  <!-- Gallery Index -->
  <script id="gallery-index-template" type="text/html">
    <h1>Images</h1>
    <div id="uploader">
      <div class="button-bar">
        <a id="upload-button" class="button">Upload</a>
      </div>
    </div>
    <div class="gallery">
      <ul class="image-list block-grid three-up"></ul>
    </div>
  </script>

  <script id="gallery-item-template" type="text/html">
    <img src="/uploads/<%= url %>"/>
    <a class="small alert button delete">x</a>
  </script>
  <!-- Decks Index -->

  <script id="decks-index-layout" type="text/html">
    <div id="decks-index-region"></div>
  </script>

  <script id="decks-index-template" type="text/html">
    <div class="row">
      <div class="four columns">
        <form action="/decks" method="POST" class="custom">
          <fieldset>
            <label>Description</label>
            <input type="text" />
            <input type="submit" class="button" value="Create deck" />
          </fieldset>
        </form>
      </div>
      <div class="eight columns">
        <form action="/decks/activate" method="PUT" class="custom nice">
        <table>
          <thead>
            <tr>
              <th class="cell-title">Title</th>
              <th class="cell-active">Active</th>
            </tr>
          </thead>
          <tbody></tbody>
        </table>
        </form>
      </div>
    </div>
  </script>

  <script id="decks-table-row-template" type="text/html">
    <td class="cell-title"><a class="small alert button round delete">Delete</a> <a href="#decks/<%= id %>/edit"><%= title %></a></td>  
    <td class="cell-active"><input name="active" type="radio" value="<%= id %>" /></td>
  </script>

  <script id="decks-empty-template" type="text/html">
    <td colspan="2" class="no-results-cell">There aren't any decks...</td>  
  </script>

  <!-- Decks Edit -->

  <script id="deck-edit-layout" type="text/html">
    <div id="deck-edit-region"></div>
  </script>

  <script id="deck-edit-template" type="text/html">
  <div class="counter">
    <span class="counter-at">0</span>/
    <span class="counter-of">0</span>
  </div>

  <a class="button small add">Add Card</a>
  <form>
    <label>Caption</label>
    <textarea name="content"></textarea>

    <label>Url</label>
    <input type="text" name="url"></textarea>

    <a class="small button">Background</a>
  </form>
  <a class="button small prev">&laquo;</a>
  <a class="button small next">&raquo;</a>
  </script>

  <script src="/content/js/lib/jquery.js"></script>
  <script src="/content/js/lib/foundation.min.js"></script>
  <script src="/content/js/lib/underscore.js"></script>
  <script src="/content/js/lib/backbone.js"></script>
  <script src="/content/js/lib/backbone.marionette.js"></script>
  <script src="/content/js/lib/fileuploader.js"></script>
  <script src="/content/js/data.js"></script>

  <script>

  /* App
  /******************************/
  var App = new Backbone.Marionette.Application();

  App.addRegions({ 
    content: "#main",
    nav: "#nav" 
  });

  /* Models
  /******************************/
  var Deck = Backbone.Model.extend({
    url:function(){
      var url = '/decks', id = this.get('id');
      id && (url += ('/'+id))
      return url;
    }  
  });

  var Card = Backbone.Model.extend({});
  
  var Image = Backbone.Model.extend({
    url:function(){
      var url = '/images', id = this.get('id');
      id && (url += ('/'+id))
      return url;
    }    
  });

  var Page = Backbone.Model.extend({});

  /* Collections
  /******************************/
  var DeckCollection = Backbone.Collection.extend({
    url:'/decks',
    model: Deck    
  });

  var PageCollection = Backbone.Collection.extend({ model:Page });

  var ImageCollection = Backbone.Collection.extend({ 
    url:'/images',
    model: Image 
  });

  /* Views [Navigation]
  /******************************/
  var NavItemView = Backbone.Marionette.ItemView.extend({
    tagName:'li',
    template: '#nav-item-template'  
  });

  var NavListView = Backbone.Marionette.CollectionView.extend({
    tagName: 'ul',
    className: 'nav-bar',
    itemView: NavItemView,
    initialize: function(){
      this.collection = new PageCollection(pages);
    }
  });


  /* Views [Decks Index]
  /******************************/
  var DecksIndexLayout = Backbone.Marionette.Layout.extend({
    template: '#decks-index-layout',

    regions: {
      decks: '#decks-index-region'
    },

    initialize: function(){
      var collection = new DeckCollection();      
        
      collection.fetch();
      
      this.collection = collection;
    },

    onRender:function(){
      var view = new DecksIndexView({ collection: this.collection });      
      this.decks.show( view );
    }
  });

  var DecksTableRowView = Backbone.Marionette.ItemView.extend({
    tagName:'tr',
    template: '#decks-table-row-template',
    events: { 
      'click .delete' : 'deleteDeck' 
    },
    deleteDeck: function(){
      this.model.destroy();
    }
  });

  var DecksEmptyView = Backbone.Marionette.ItemView.extend({
    tagName:'tr',
    template: '#decks-empty-template'
  });

  var DecksIndexView = Backbone.Marionette.CompositeView.extend({
    className:'decks-index',
    itemView: DecksTableRowView,
    template: '#decks-index-template',
    emptyView: DecksEmptyView,
    events: {
      'submit':'createDeck'
    },

    ui: {
      input:"[type='text']"
    },

    createDeck: function(){
      var input = this.ui.input,
          model = new Deck(),
          view = this;

      model.save({title:input.val()})
           .done(function(){ view.collection.add(model); })

      input.val('');
      input.focus();

     return false;
    },

    appendHtml: function(collectionView, itemView){
      collectionView.$('tbody').append(itemView.el);
    }
  });

  /* Views [Decks Edit]
  /******************************/
  var DecksEditLayout = Backbone.Marionette.Layout.extend({
    template: '#deck-edit-layout',

    regions: {
      decks: '#deck-edit-region'
    },

    onRender:function(){
      var view = new DecksEditView({ model: this.model });      
      this.decks.show( view );
    }
  });

  var DecksEditView = Backbone.Marionette.ItemView.extend({
    className:'decks-edit',
    itemView: DecksTableRowView,
    template: '#deck-edit-template'
  });

  /* Views [Gallery Index]
  /******************************/
  var GalleryItemView = Backbone.Marionette.ItemView.extend({
    tagName:'li',
    template:'#gallery-item-template',
    events: {
      'click .delete':'deleteImage'
    },
    deleteImage:function(){
      this.model.destroy();
    }
  });
  
  var GalleryIndexView = Backbone.Marionette.CompositeView.extend({
    className:'gallery-index',
    itemView: GalleryItemView,
    itemViewContainer:'.image-list',
    template: '#gallery-index-template',

    initialize: function(){
      this.collection = new ImageCollection();
      this.collection.fetch();
    },
    onRender: function(){
      var view = this;
      var uploader = new qq.FileUploaderBasic({
          element: this.$('#uploader')[0],
          action: '/images',
          debug: true,
          button: this.$('#upload-button')[0],
          onProgress: function(){},
		      onComplete: function(id, fileName, responseJSON){
            if (responseJSON.success){
              view.collection.add(new Image(responseJSON.image));
            }
          }
      });
    }
  });

  /* Controllers
  /******************************/
  var DecksController = {
    index: function(){
      App.content.show( new DecksIndexLayout() );
    },
    edit: function(id){
      var model = new Deck();      
      model.fetch({id:id}).done(function(){
        App.content.show( new DecksEditLayout({model:model}) );
      });      
    }
  };

  var GalleryController = {
    index: function(){
      App.content.show( new GalleryIndexView() );
    }
  };

  /* Routers
  /******************************/  
  var GalleryRouter = Backbone.Marionette.AppRouter.extend({
    controller: GalleryController,
    appRoutes: {
      "gallery" : "index"
    }
  });

  var DecksRouter = Backbone.Marionette.AppRouter.extend({
    controller: DecksController,
    appRoutes: {
      "decks/:id/edit" : "edit",
      "decks" : "index"
    }
  });


  /* Initialize
  /******************************/
  App.on("initialize:after", function(){    
    new DecksRouter();
    new GalleryRouter();
    Backbone.history.start({silent:false});
    App.nav.show( new NavListView() )
  });

  App.start();
</script>  

</body>
</html>
